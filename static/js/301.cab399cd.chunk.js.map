{"version":3,"file":"static/js/301.cab399cd.chunk.js","mappings":"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","sources":["globe/index.js"],"sourcesContent":["import * as React from \"react\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { useWheel } from \"react-use-gesture\";\r\nimport { geoOrthographic, geoPath } from \"d3-geo\";\r\nimport { feature } from \"topojson-client\";\r\nimport jsonData from \"./countries-110m.json\";\r\nimport { map, clamp, isEmpty } from \"lodash\";\r\nimport \"./globe.css\";\r\n\r\nconst Countries = feature(jsonData, jsonData.objects.countries).features;\r\n\r\nconst Globe = animated(\r\n  ({ lat = 0, lng = 0, zoom, size = 400, onGlobeClick, currentLocation }) => {\r\n    const svgref = React.useRef();\r\n    const projection = React.useMemo(() => {\r\n      return geoOrthographic()\r\n        .translate([size / 2, size / 2])\r\n        .scale((size / 2) * zoom)\r\n        .clipAngle(90)\r\n        .rotate([-lat, -lng]);\r\n    }, [size, lat, lng, zoom]);\r\n\r\n    const pathgen = geoPath(projection);\r\n    const currentCoordinates = [\r\n      currentLocation.userLng,\r\n      currentLocation.userLat,\r\n    ];\r\n    const pinSize = size / 60 / zoom;\r\n    // Check if it's behind the globe\r\n    const isPinVisible = pathgen({\r\n      type: \"Point\",\r\n      coordinates: [currentCoordinates[0], currentCoordinates[1]],\r\n    });\r\n\r\n    return (\r\n      <svg ref={svgref} width={size} height={size} title=\"globe\">\r\n        <defs>\r\n          <radialGradient\r\n            id=\"gradient\"\r\n            cx=\"50%\"\r\n            cy=\"50%\"\r\n            r=\"50%\"\r\n            fx=\"50%\"\r\n            fy=\"50%\"\r\n          >\r\n            <stop\r\n              offset=\"0%\"\r\n              style={{ stopColor: \"#325181\", stopOpacity: 1 }}\r\n            />\r\n            <stop\r\n              offset=\"100%\"\r\n              style={{ stopColor: \"#293E5F\", stopOpacity: 1 }}\r\n            />\r\n          </radialGradient>\r\n        </defs>\r\n        <circle\r\n          fill=\"url(#gradient)\"\r\n          cx={size / 2}\r\n          cy={size / 2}\r\n          r={(size / 2) * zoom}\r\n          onClick={(e) => {\r\n            let rect = svgref.current.getBoundingClientRect();\r\n            const [lat, lng] = projection.invert([\r\n              e.pageX - rect.left,\r\n              e.pageY - rect.top,\r\n            ]);\r\n            onGlobeClick.call(null, lat, lng);\r\n          }}\r\n          style={{ cursor: \"pointer\" }}\r\n        />\r\n        <g style={{ pointerEvents: \"none\" }}>\r\n          {map(Countries, (d, i) => (\r\n            <path\r\n              fill=\"#63A2FF\"\r\n              stroke=\"#5891E5\"\r\n              key={`path-${i}`}\r\n              d={pathgen(d)}\r\n            />\r\n          ))}\r\n        </g>\r\n        {currentLocation.userLat &&\r\n          !isEmpty(isPinVisible) &&\r\n          [0, 1].map((pin) => (\r\n            <circle\r\n              key={pin}\r\n              className={`pin-${pin}`}\r\n              cx={projection(currentCoordinates)[0]}\r\n              cy={projection(currentCoordinates)[1]}\r\n              r={pinSize >= 15 ? 5 : size / 60 / zoom}\r\n              fill=\"#fff\"\r\n            />\r\n          ))}\r\n      </svg>\r\n    );\r\n  }\r\n);\r\n\r\nfunction GlobeContainer({ size = 400 }) {\r\n  const [state, setState] = React.useState({\r\n    lat: 0,\r\n    lng: 0,\r\n    userLat: 0,\r\n    userLng: 0,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition((position) =>\r\n      setState({\r\n        userLng: position.coords.longitude,\r\n        userLat: position.coords.latitude,\r\n        lat: position.coords.longitude,\r\n        lng: position.coords.latitude,\r\n      })\r\n    );\r\n  }, [setState]);\r\n\r\n  // Panning\r\n  const { lat, lng } = useSpring({\r\n    lat: state.lat,\r\n    lng: state.lng,\r\n  });\r\n\r\n  // Zooming (use cmd/ctrl + scroll to zoom)\r\n  const [zoom, setZoom] = React.useState({\r\n    wheeling: false,\r\n    scale: 1,\r\n  });\r\n\r\n  const canvasRef = React.useRef();\r\n\r\n  const bind = useWheel(\r\n    ({ wheeling, metaKey, delta: [deltaX, deltaY], event }) => {\r\n      if (metaKey && event) {\r\n        const newScale = clamp(zoom.scale + deltaY / 600, 0.2, 10);\r\n\r\n        setZoom({\r\n          ...zoom,\r\n          scale: newScale,\r\n          wheeling,\r\n        });\r\n      } else {\r\n        setZoom({\r\n          ...zoom,\r\n          wheeling,\r\n        });\r\n      }\r\n    }\r\n  );\r\n\r\n  return (\r\n    <div {...bind()} ref={canvasRef}>\r\n      <Globe\r\n        lat={lat}\r\n        lng={lng}\r\n        zoom={zoom.scale}\r\n        currentLocation={{ userLat: state.userLat, userLng: state.userLng }}\r\n        size={size}\r\n        onGlobeClick={(lat, lng) => {\r\n          setState({\r\n            ...state,\r\n            lat,\r\n            lng,\r\n          });\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GlobeContainer;\r\n"],"names":["Countries","feature","jsonData","features","Globe","animated","_ref","_ref$lat","lat","_ref$lng","lng","zoom","_ref$size","size","onGlobeClick","currentLocation","svgref","React","projection","geoOrthographic","translate","scale","clipAngle","rotate","pathgen","geoPath","currentCoordinates","userLng","userLat","pinSize","isPinVisible","type","coordinates","_jsxs","ref","width","height","title","children","_jsx","id","cx","cy","r","fx","fy","offset","style","stopColor","stopOpacity","fill","onClick","e","rect","current","getBoundingClientRect","_projection$invert","invert","pageX","left","pageY","top","_projection$invert2","_slicedToArray","call","cursor","pointerEvents","map","d","i","stroke","concat","isEmpty","pin","className","_ref2","_ref2$size","_React$useState","_React$useState2","state","setState","navigator","geolocation","getCurrentPosition","position","coords","longitude","latitude","_useSpring","useSpring","_React$useState3","wheeling","_React$useState4","setZoom","canvasRef","bind","useWheel","_ref3","metaKey","_ref3$delta","delta","deltaY","event","newScale","clamp","_objectSpread"],"sourceRoot":""}